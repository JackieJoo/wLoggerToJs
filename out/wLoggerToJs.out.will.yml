format: outwillfile-2.0
root:
  - wLoggerToJs.out
consistency:
  ../.ex.will.yml: &ref_0
    hash: 6d216764968dfdba05f422a308207146
    size: 1487
  ../.im.will.yml: &ref_1
    hash: 844ab52058e80d039128df770afd6bfa
    size: 1692
module:
  wLoggerToJs.out:
    about:
      name: wLoggerToJs
      description: >-
        Class to redirect logging to JavaScript structure. Logger supports
        colorful formatting, verbosity control, chaining, combining several
        loggers/consoles into logging network. Logger provides 10 levels of
        verbosity [ 0,9 ] any value beyond clamped and multiple approaches to
        control verbosity. Logger may use console/stream/process/file as input
        or output. Unlike alternatives, colorful formatting is cross-platform
        and works similarly in the browser and on the server side. Use the
        module to make your diagnostic code working on any platform you work
        with and to been able to redirect your output to/from any
        destination/source.
      enabled: 1
      version: 0.4.71
      interpreters: &ref_2
        - nodejs >= 8.0.0
        - chrome >= 60.0.0
        - firefox >= 60.0.0
      keywords: &ref_3
        - wTools
    path:
      module.willfiles:
        criterion:
          predefined: 1
        path: wLoggerToJs.out.will.yml
      module.common:
        criterion:
          predefined: 1
        path: wLoggerToJs.out
      module.original.willfiles:
        criterion:
          predefined: 1
        path:
          - ../.ex.will.yml
          - ../.im.will.yml
      module.peer.willfiles:
        criterion:
          predefined: 1
        path:
          - ../.ex.will.yml
          - ../.im.will.yml
      module.peer.in:
        criterion:
          predefined: 1
        path: ..
      download:
        criterion:
          predefined: 1
      remote:
        criterion:
          predefined: 1
      repository:
        path: 'git+https:///github.com/Wandalen/wLoggerToJs.git'
      origins:
        path:
          - 'git+https:///github.com/Wandalen/wLoggerToJs.git'
          - 'npm:///wloggertojs'
      bugs:
        path: 'https:///github.com/Wandalen/wLoggerToJs/issues'
      in:
        criterion:
          predefined: 0
        path: .
      temp:
        path: .
      out:
        criterion:
          predefined: 0
        path: .
      out.debug:
        criterion:
          debug: 1
        path: debug
      out.release:
        criterion:
          debug: 0
        path: release
      proto:
        path: ../proto
      export:
        path: '{path::proto}/**'
      exported.dir.proto.export:
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
        path: ../proto
      exported.files.proto.export:
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
        path:
          - ../proto
          - ../proto/dwtools
          - ../proto/dwtools/Tools.s
          - ../proto/dwtools/abase
          - ../proto/dwtools/abase/l9
          - ../proto/dwtools/abase/l9/printer
          - ../proto/dwtools/abase/l9/printer/top
          - ../proto/dwtools/abase/l9/printer/top/ToJs.s
          - ../proto/dwtools/abase/l9.test
          - ../proto/dwtools/abase/l9.test/printer
          - ../proto/dwtools/abase/l9.test/printer/ToJs.test.s
          - ../proto/dwtools/amid
          - ../proto/dwtools/atop
    submodule: {}
    reflector:
      reflect.proto.:
        src:
          filePath:
            'path::proto': 'path::out.*=1'
          prefixPath: ''
        dst:
          prefixPath: ''
        mandatory: 1
        criterion:
          debug: 0
        inherit:
          - predefined.*
      reflect.proto.debug:
        src:
          filePath:
            'path::proto': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 1
        inherit:
          - predefined.*
      reflect.submodules:
        src:
          filePath:
            'submodule::*/exported::*=1/path::exportedDir*=1': 'path::out.*=1'
          prefixPath: ''
        dst:
          prefixPath: ''
        mandatory: 1
        criterion:
          debug: 1
        inherit:
          - predefined.*
      exported.proto.export:
        src:
          filePath:
            '**': ''
          prefixPath: ../proto
        mandatory: 1
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
      exported.files.proto.export:
        src:
          filePath:
            'path::exported.files.proto.export': ''
          basePath: .
          prefixPath: 'path::exported.dir.proto.export'
          recursive: 0
        recursive: 0
        mandatory: 1
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
    step:
      export.proto:
        opts:
          export: 'path::export'
          tar: 0
        criterion:
          debug: 1
          proto: 1
        inherit:
          - module.export
      clean.out.:
        opts:
          filePath: 'path::out.debug'
        criterion:
          debug: 0
        inherit:
          - files.delete
      clean.out.debug:
        opts:
          filePath: 'path::out.debug'
        criterion:
          debug: 1
        inherit:
          - files.delete
      reflect.proto.:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 0
        inherit:
          - files.reflect
      reflect.proto.debug:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 0
        inherit:
          - files.reflect
      reflect.proto.raw:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 1
        inherit:
          - files.reflect
      reflect.proto.debug.raw:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
          verbosity: null
        criterion:
          debug: 1
          raw: 1
        inherit:
          - files.reflect
      reflect.submodules.:
        opts:
          reflector: 'reflector::reflect.submodules*=1'
        criterion:
          debug: 1
          raw: 0
        inherit:
          - files.reflect
      reflect.submodules.raw:
        opts:
          reflector: 'reflector::reflect.submodules*=1'
        criterion:
          debug: 1
          raw: 1
        inherit:
          - files.reflect
      reflect.submodules:
        opts:
          reflector: 'reflector::reflect.submodules*'
        criterion:
          debug: 1
        inherit:
          - files.reflect
    build:
      proto.export:
        steps:
          - 'build::debug.raw'
          - 'step::export.proto'
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
      debug.raw:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          default: 1
          debug: 1
          raw: 1
      debug.compiled:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 0
      release.raw:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 1
      release.compiled:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 0
      all:
        steps:
          - 'build::debug.raw'
          - 'build::release.compiled'
    exported:
      proto.export:
        version: 0.4.71
        recursive: 0
        withIntegrated: 2
        tar: 0
        exportedReflector: 'reflector::exported.proto.export'
        exportedFilesReflector: 'reflector::exported.files.proto.export'
        exportedDirPath: 'path::exported.dir.proto.export'
        exportedFilesPath: 'path::exported.files.proto.export'
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
    consistency:
      ../.ex.will.yml: *ref_0
      ../.im.will.yml: *ref_1
  ../:
    about:
      name: wLoggerToJs
      description: >-
        Class to redirect logging to JavaScript structure. Logger supports
        colorful formatting, verbosity control, chaining, combining several
        loggers/consoles into logging network. Logger provides 10 levels of
        verbosity [ 0,9 ] any value beyond clamped and multiple approaches to
        control verbosity. Logger may use console/stream/process/file as input
        or output. Unlike alternatives, colorful formatting is cross-platform
        and works similarly in the browser and on the server side. Use the
        module to make your diagnostic code working on any platform you work
        with and to been able to redirect your output to/from any
        destination/source.
      enabled: 1
      version: 0.4.71
      interpreters: *ref_2
      keywords: *ref_3
    path:
      module.willfiles:
        criterion:
          predefined: 1
        path:
          - .ex.will.yml
          - .im.will.yml
      module.original.willfiles:
        criterion:
          predefined: 1
        path:
          - .ex.will.yml
          - .im.will.yml
      module.peer.willfiles:
        criterion:
          predefined: 1
        path: out/wLoggerToJs.out.will.yml
      module.peer.in:
        criterion:
          predefined: 1
        path: out
      module.common:
        criterion:
          predefined: 1
        path: ./
      download:
        criterion:
          predefined: 1
      remote:
        criterion:
          predefined: 1
      repository:
        path: 'git+https:///github.com/Wandalen/wLoggerToJs.git'
      origins:
        path:
          - 'git+https:///github.com/Wandalen/wLoggerToJs.git'
          - 'npm:///wloggertojs'
      bugs:
        path: 'https:///github.com/Wandalen/wLoggerToJs/issues'
      in:
        criterion:
          predefined: 0
        path: .
      temp:
        path: out
      out:
        criterion:
          predefined: 0
        path: out
      out.debug:
        criterion:
          debug: 1
        path: ./out/debug
      out.release:
        criterion:
          debug: 0
        path: ./out/release
      proto:
        path: ./proto
      export:
        path: '{path::proto}/**'
    submodule: {}
    reflector:
      reflect.proto.:
        src:
          filePath:
            'path::proto': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 0
        inherit:
          - predefined.*
      reflect.proto.debug:
        src:
          filePath:
            'path::proto': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 1
        inherit:
          - predefined.*
      reflect.submodules:
        src:
          filePath:
            'submodule::*/exported::*=1/path::exportedDir*=1': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 1
        inherit:
          - predefined.*
    step:
      export.proto:
        opts:
          export: 'path::export'
          tar: 0
        criterion:
          debug: 1
          proto: 1
        inherit:
          - module.export
      clean.out.:
        opts:
          filePath: 'path::out.debug'
        criterion:
          debug: 0
        inherit:
          - files.delete
      clean.out.debug:
        opts:
          filePath: 'path::out.debug'
        criterion:
          debug: 1
        inherit:
          - files.delete
      reflect.proto.:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 0
        inherit:
          - files.reflect
      reflect.proto.debug:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 0
        inherit:
          - files.reflect
      reflect.proto.raw:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 1
        inherit:
          - files.reflect
      reflect.proto.debug.raw:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
          verbosity: null
        criterion:
          debug: 1
          raw: 1
        inherit:
          - files.reflect
      reflect.submodules.:
        opts:
          reflector: 'reflector::reflect.submodules*=1'
        criterion:
          debug: 1
          raw: 0
        inherit:
          - files.reflect
      reflect.submodules.raw:
        opts:
          reflector: 'reflector::reflect.submodules*=1'
        criterion:
          debug: 1
          raw: 1
        inherit:
          - files.reflect
      reflect.submodules:
        opts:
          reflector: 'reflector::reflect.submodules*'
        criterion:
          debug: 1
        inherit:
          - files.reflect
    build:
      proto.export:
        steps:
          - 'build::debug.raw'
          - 'step::export.proto'
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
      debug.raw:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          default: 1
          debug: 1
          raw: 1
      debug.compiled:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 0
      release.raw:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 1
      release.compiled:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 0
      all:
        steps:
          - 'build::debug.raw'
          - 'build::release.compiled'
    consistency:
      ../.ex.will.yml:
        hash: 6d216764968dfdba05f422a308207146
        size: 1487
      ../.im.will.yml:
        hash: 844ab52058e80d039128df770afd6bfa
        size: 1692
